{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as FileSaver from 'file-saver';\nimport * as React from 'react';\nimport toCsv from './lib/csv';\nexport { toCsv };\nexport default class CsvDownload extends React.Component {\n  constructor() {\n    super(...arguments);\n    // eslint-disable-next-line sonarjs/cognitive-complexity\n    this.handleClick = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        suffix,\n        prefix,\n        bom,\n        extension,\n        disabled,\n        meta,\n        separator,\n        handleError,\n        handleEmpty\n      } = this.props;\n      if (disabled) {\n        return;\n      }\n      let {\n        filename\n      } = this.props;\n      let csv;\n      try {\n        csv = yield toCsv(this.props);\n      } catch (err) {\n        return handleError === null || handleError === void 0 ? void 0 : handleError(err);\n      }\n      if (!csv) {\n        if (handleEmpty) {\n          return handleEmpty();\n        } else {\n          csv = '';\n        }\n      }\n      const bomCode = bom !== false ? '\\ufeff' : '';\n      const metaContent = meta ? `sep=${separator}\\r\\n` : '';\n      const resolvedExtension = extension || '.csv';\n      if (filename.indexOf(resolvedExtension) === -1) {\n        filename += resolvedExtension;\n      }\n      if (suffix) {\n        filename = typeof suffix === 'string' || typeof suffix === 'number' ? filename.replace(resolvedExtension, `_${suffix}${resolvedExtension}`) : filename.replace(resolvedExtension, `_${new Date().getTime()}${resolvedExtension}`);\n      }\n      if (prefix) {\n        filename = typeof prefix === 'string' || typeof prefix === 'number' ? `${prefix}_${filename}` : `${new Date().getTime()}_${filename}`;\n      }\n      const blob = new Blob([`${bomCode}${metaContent}${csv}`], {\n        type: 'text/csv;charset=utf-8'\n      });\n      FileSaver.saveAs(blob, filename);\n    });\n  }\n  render() {\n    const _a = this.props,\n      {\n        children,\n        text,\n        disabled,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        bom,\n        filename,\n        extension,\n        prefix,\n        suffix,\n        meta,\n        handleError,\n        handleEmpty,\n        columns,\n        datas,\n        separator,\n        noHeader,\n        wrapColumnChar,\n        newLineAtEnd,\n        chunkSize\n      } = _a,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      props = __rest(_a, [\"children\", \"text\", \"disabled\", \"bom\", \"filename\", \"extension\", \"prefix\", \"suffix\", \"meta\", \"handleError\", \"handleEmpty\", \"columns\", \"datas\", \"separator\", \"noHeader\", \"wrapColumnChar\", \"newLineAtEnd\", \"chunkSize\"]);\n    if (typeof children === 'undefined') {\n      return React.createElement(\"button\", Object.assign({\n        type: \"button\"\n      }, props, {\n        onClick: this.handleClick,\n        disabled: disabled\n      }), text ? text : 'Download');\n    }\n    return React.createElement(\"div\", Object.assign({\n      role: \"button\",\n      tabIndex: 0\n    }, props, {\n      onClick: this.handleClick,\n      onKeyPress: this.handleClick\n    }), children);\n  }\n}","map":{"version":3,"mappings":"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","names":["FileSaver","React","toCsv","CsvDownload","Component","constructor","__awaiter","suffix","prefix","bom","extension","disabled","meta","separator","handleError","handleEmpty","props","filename","csv","err","bomCode","metaContent","resolvedExtension","indexOf","replace","Date","getTime","blob","Blob","type","saveAs","render","_a","children","text","columns","datas","noHeader","wrapColumnChar","newLineAtEnd","chunkSize","onClick","handleClick","role","tabIndex","onKeyPress"],"sources":["C:\\Users\\user\\web\\React-Practical-2-master\\node_modules\\react-csv-downloader\\src\\index.tsx"],"sourcesContent":["import * as FileSaver from 'file-saver'\nimport * as React from 'react'\n\nimport toCsv, { ICsvProps } from './lib/csv'\n\nexport { toCsv, ICsvProps }\n\nexport type PrefixSuffix = boolean | string | number\n\nexport interface ICsvDownloadProps\n  extends ICsvProps,\n    Omit<React.HTMLAttributes<HTMLDivElement | HTMLButtonElement>, 'prefix'> {\n  bom?: boolean\n  filename: string\n  extension?: string\n  prefix?: PrefixSuffix\n  suffix?: PrefixSuffix\n  text?: string\n  disabled?: boolean\n  meta?: boolean\n  handleError?: (err: unknown) => void\n  handleEmpty?: () => void\n}\n\nexport default class CsvDownload extends React.Component<ICsvDownloadProps> {\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  public handleClick = async () => {\n    const { suffix, prefix, bom, extension, disabled, meta, separator, handleError, handleEmpty } = this.props\n\n    if (disabled) {\n      return\n    }\n\n    let { filename } = this.props\n    let csv: string | void\n    try {\n      csv = await toCsv(this.props)\n    } catch (err) {\n      return handleError?.(err)\n    }\n    if (!csv) {\n      if (handleEmpty) {\n        return handleEmpty()\n      } else {\n        csv = ''\n      }\n    }\n    const bomCode = bom !== false ? '\\ufeff' : ''\n    const metaContent = meta ? `sep=${separator}\\r\\n` : ''\n\n    const resolvedExtension = extension || '.csv'\n    if (filename.indexOf(resolvedExtension) === -1) {\n      filename += resolvedExtension\n    }\n\n    if (suffix) {\n      filename =\n        typeof suffix === 'string' || typeof suffix === 'number'\n          ? filename.replace(resolvedExtension, `_${suffix}${resolvedExtension}`)\n          : filename.replace(resolvedExtension, `_${new Date().getTime()}${resolvedExtension}`)\n    }\n\n    if (prefix) {\n      filename =\n        typeof prefix === 'string' || typeof prefix === 'number'\n          ? `${prefix}_${filename}`\n          : `${new Date().getTime()}_${filename}`\n    }\n\n    const blob = new Blob([`${bomCode}${metaContent}${csv}`], {\n      type: 'text/csv;charset=utf-8',\n    })\n    FileSaver.saveAs(blob, filename)\n  }\n\n  public render() {\n    const {\n      children,\n      text,\n      disabled,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      bom,\n      filename,\n      extension,\n      prefix,\n      suffix,\n      meta,\n      handleError,\n      handleEmpty,\n      columns,\n      datas,\n      separator,\n      noHeader,\n      wrapColumnChar,\n      newLineAtEnd,\n      chunkSize,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props\n\n    if (typeof children === 'undefined') {\n      return (\n        <button type=\"button\" {...props} onClick={this.handleClick} disabled={disabled}>\n          {text ? text : 'Download'}\n        </button>\n      )\n    }\n\n    return (\n      <div role=\"button\" tabIndex={0} {...props} onClick={this.handleClick} onKeyPress={this.handleClick}>\n        {children}\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}